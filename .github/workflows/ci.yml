name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, stg]
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage to deploy (prod|staging|dev)"
        required: false
        default: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      stage: ${{ steps.map.outputs.stage }}
      subdomain: ${{ steps.map.outputs.subdomain }}
    steps:
      - id: map
        run: |
          set -e

          # Branch â†’ default STAGE / ENVIRONMENT
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            STAGE="prod"; ENVIRONMENT="prod"
          elif [ "${{ github.ref }}" = "refs/heads/stg" ]; then
            STAGE="stg"; ENVIRONMENT="stg"
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            STAGE="dev"; ENVIRONMENT="dev"
          else
            echo "Unsupported branch: ${{ github.ref }}"; exit 1
          fi

          # Optional manual override (workflow_dispatch)
          if [ -n "${{ github.event.inputs.stage }}" ]; then
            case "${{ github.event.inputs.stage }}" in
              prod|stg|dev)
                STAGE="${{ github.event.inputs.stage }}"
                ENVIRONMENT="${{ github.event.inputs.stage }}"
                ;;
              *)
                echo "Invalid manual stage '${{ github.event.inputs.stage }}'"; exit 1
                ;;
            esac
          fi

          case "$STAGE" in
            prod|production) SUBDOMAIN="";;
            stg)         SUBDOMAIN="stg";;
            dev)             SUBDOMAIN="dev";;
            *)               SUBDOMAIN="$STAGE";;  # fallback: <stage>.api
          esac

          if [ -z "$SUBDOMAIN" ]; then
            SUBDOMAIN="form"
          else
            SUBDOMAIN="${SUBDOMAIN}-form"
          fi

          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "subdomain=$SUBDOMAIN" >> $GITHUB_OUTPUT

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
      HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
      CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
      STAGE: ${{ needs.setup.outputs.stage }}
      SUBDOMAIN: ${{ needs.setup.outputs.subdomain }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install deps & build OpenNext
      run: |
        npm install --frozen-lockfile
        npx open-next build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: SST deploy (${{ env.STAGE }})
      run: npx sst deploy --stage "$STAGE"
